const {
  ChannelType,
  ButtonInteraction,
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  PermissionFlagsBits,
} = require("discord.js");
const ticketSchema = require("../../schemas/Ticket");
const TicketSetup = require("../../schemas/TicketSetup");

module.exports = {
  name: "interactionCreate",

  async execute(interaction) {
    const { guild, member, customId, channel } = interaction;
    const { ViewChannel, SendMessages, ManageChannels, ReadMessageHistory } = PermissionFlagsBits;
    const ticketId = Math.floor(Math.random() * 9000) + 10000;

    if (!interaction.isButton()) return;
    

    const data = await TicketSetup.findOne({ GuildID: guild.id});

    if (!data)
      return;

    if (!data.Buttons.includes(customId))
      return;

    if (!guild.members.me.permissions.has(ManageChannels))
      interaction.reply({
        content: "You don't have permission for this",
        ephemeral: true,
    });

    try {
      await guild.channels.create({
          name: `${member.user.username}-ticket${ticketId}`,
          type: ChannelType.GuildText,
          parent: data.Category,
          permissionOverwrites: [
            {
              id: data.Everyone,
              deny: [ViewChannel, SendMessages, ReadMessageHistory],
            },
            {
              id: member.id,
              allow: [ViewChannel, SendMessages, ReadMessageHistory],
            },
          ],
        })
        .then(async (channel) => {
          const newTicketSchema = await ticketSchema.create({
            GuildID: guild.id,
            MembersID: member.id,
            TicketID: ticketId,
            ChannelID: channel.id,
            Closed: false,
            Locked: false,
            Type: customId,
            Claimed: false,
          });

          const embed = new EmbedBuilder()
            .setTitle(`${guild.name} - Ticket: ${customId}`)
            .setDescription("Our team will contact you shortly")
            .setFooter({
              text: `${ticketId}`,
              iconURL: member.displayAvatarURL({ dynamic: true }),
            })
            .setTimestamp();

          const button = new ActionRowBuilder().setComponents(
            new ButtonBuilder()
              .setCustomId("close")
              .setLabel("Close ticket")
              .setStyle(ButtonStyle.Primary)
              .setEmoji("â›”"),
            new ButtonBuilder()
              .setCustomId("lock")
              .setLabel("Lock the ticket")
              .setStyle(ButtonStyle.Secondary)
              .setEmoji("ðŸ”’"),
            new ButtonBuilder()
              .setCustomId("unlock")
              .setLabel("Unlock the ticket")
              .setStyle(ButtonStyle.Success)
              .setEmoji("ðŸ”“"),
            new ButtonBuilder()
              .setCustomId("claim")
              .setLabel("Claims the ticket")
              .setStyle(ButtonStyle.Success)
              .setEmoji("âœ…")
          );

          channel.send({
            embeds: [embed],
            components: [button],
          });

          interaction.reply({
            content: "Succesfully created ticket",
            ephemeral: true,
          });
        });
    } catch (err) {
      return console.log(err);
    }
  },
};
